// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String?   @unique
  image          String?
  hashedPassword String?
  lastSeen       DateTime? @default(now())
  isOnline       Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversationIds String[]       @map("conversationsIds") @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Game {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  winner        String?
  status GameState?
  isOver        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isMultiplayer Boolean

  boardState Board?
  moves      Move[]

  players Player[]
}

enum GameState {
  IN_PROGRESS
  PAUSED
  COMPLETED
}

model Player {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  color    PlayerColor
  isAi     Boolean

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @db.ObjectId
}
enum PlayerColor {
  WHITE
  BLACK
}

model Board {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  points Int[]
  bar    Int[]
  off    Int[]
  capturedPieces Int[]

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique @db.ObjectId
}

model Move {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  playerId  String
  fromPoint Int
  toPoint   Int
  isCapture Boolean

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @db.ObjectId

  diceRoll   DiceRoll @relation(fields: [diceRollId], references: [id])
  diceRollId String   @db.ObjectId
}

model DiceRoll {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  dice1 Int
  dice2 Int

  move Move[]
}
