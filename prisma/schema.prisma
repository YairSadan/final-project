generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  username        String?
  email           String?        @unique
  image           String?
  hashedPassword  String?
  lastSeen        DateTime?      @default(now())
  isOnline        Boolean?       @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  conversationIds String[]       @map("conversationsIds") @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  gameIds         String[]       @db.ObjectId
  games           Game[]         @relation(fields: [gameIds], references: [id])
  seenMessageIds  String[]       @db.ObjectId
  seenMessages    Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  accounts        Account[]
  messages        Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  messagesIds   String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Game {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  winner        String?
  isOver        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isMultiplayer Boolean
  turn          String?   @db.ObjectId
  boardState    Board?
  userIds       String[] @db.ObjectId
  users         User[]   @relation(fields: [userIds], references: [id])
}

enum PlayerColor {
  WHITE
  BLACK
}

model Board {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  triangles Triangle[]
  bar       Bar?
  off       Piece[]
  game      Game       @relation(fields: [gameId], references: [id])
  gameId    String     @unique @db.ObjectId
}

model Bar {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  pieces  Piece[]
  board   Board   @relation(fields: [boardId], references: [id])
  boardId String  @unique @db.ObjectId
}

model Triangle {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  pieces  Piece[]
  number Int
  board   Board   @relation(fields: [boardId], references: [id])
  boardId String  @db.ObjectId
}

model Piece {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  color      PlayerColor
  state      pieceState
  triangle   Triangle?   @relation(fields: [triangleId], references: [id])
  triangleId String?      @db.ObjectId
  bar        Bar?         @relation(fields: [barId], references: [id])
  barId      String?      @db.ObjectId
  Board      Board?      @relation(fields: [boardId], references: [id])
  boardId    String?     @db.ObjectId
}

enum pieceState {
  ON_BOARD
  ON_BAR
  OFF_BOARD
}

model DiceRoll {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  dice1 Int
  dice2 Int
  dice3 Int?
  dice4 Int?
}
